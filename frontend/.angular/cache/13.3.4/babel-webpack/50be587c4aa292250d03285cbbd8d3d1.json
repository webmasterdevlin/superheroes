{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { EMPTY, forkJoin } from 'rxjs';\nimport { map, mergeMap, catchError, tap } from 'rxjs/operators';\nimport { AntiHeroActions } from './anti-hero.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/anti-hero.service\";\nimport * as i3 from \"@angular/router\";\nexport let AntiHeroEffects = /*#__PURE__*/(() => {\n  class AntiHeroEffects {\n    constructor(actions$, antiHeroService, router) {\n      this.actions$ = actions$;\n      this.antiHeroService = antiHeroService;\n      this.router = router; // get list of anti heroes in the external API\n      // set retrieved anti hero list in the state\n\n      this.getAntiHeroes$ = createEffect(() => {\n        return this.actions$.pipe(ofType(AntiHeroActions.GET_ANTI_HERO_LIST), mergeMap(() => this.antiHeroService.getAntiHeroes().pipe(map(antiHeroes => ({\n          type: AntiHeroActions.SET_ANTI_HERO_LIST,\n          antiHeroes\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // add anti-heroes in the database\n\n      this.addAntiHero$ = createEffect(() => {\n        return this.actions$.pipe(ofType(AntiHeroActions.ADD_ANTI_HERO_API), mergeMap(data => this.antiHeroService.addAntiHero(data.payload).pipe(map(antiHeroes => ({\n          type: AntiHeroActions.ADD_ANTI_HERO_STATE,\n          antiHero: data.payload\n        })), tap(() => this.router.navigate([\"anti-heroes\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n      this.modifyAntiHero$ = createEffect(() => {\n        return this.actions$.pipe(ofType(AntiHeroActions.MODIFY_ANTI_HERO_API), mergeMap(data => this.antiHeroService.updateAntiHero(data.payload.id, data.payload).pipe(map(antiHeroes => ({\n          type: AntiHeroActions.MODIFY_ANTI_HERO_STATE,\n          antiHero: data.payload\n        })), tap(() => this.router.navigate([\"anti-heroes\"])), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove anti-heroes in the database\n\n      this.removeAntiHero$ = createEffect(() => {\n        return this.actions$.pipe(ofType(AntiHeroActions.REMOVE_ANTI_HERO_API), mergeMap(data => this.antiHeroService.deleteAntiHero(data.payload).pipe(map(() => ({\n          type: AntiHeroActions.REMOVE_ANTI_HERO_STATE,\n          antiHeroId: data.payload\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      }); // remove all anti-heroes in the database\n\n      this.removeAllAntiHero$ = createEffect(() => {\n        return this.actions$.pipe(ofType(AntiHeroActions.REMOVE_ALL_ANTI_HERO_API), mergeMap(data => forkJoin([...data.payload.map(id => this.antiHeroService.deleteAntiHero(id))]).pipe(map(() => ({\n          type: AntiHeroActions.REMOVE_ALL_ANTI_HERO_STATE\n        })), catchError(() => EMPTY))));\n      }, {\n        dispatch: true\n      });\n    }\n\n  }\n\n  AntiHeroEffects.ɵfac = function AntiHeroEffects_Factory(t) {\n    return new (t || AntiHeroEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.AntiHeroService), i0.ɵɵinject(i3.Router));\n  };\n\n  AntiHeroEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AntiHeroEffects,\n    factory: AntiHeroEffects.ɵfac\n  });\n  return AntiHeroEffects;\n})();","map":null,"metadata":{},"sourceType":"module"}